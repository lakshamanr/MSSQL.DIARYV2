namespace MSSQL.DIARY.COMN.Constant
{
    public static class SqlQueryConstant
    {
        public static  string GetDatabaseProperties = @"declare @tbl_sp_spaceusedDBs table(		database_name varchar(100) NOT NULL,		database_size varchar(50) NULL,		unallocated varchar(30) NULL,		reserved varchar(20) NULL,		data varchar(20) NULL,		index_size varchar(20) NULL,		unused varchar(20) NULL		)	INSERT INTO @tbl_sp_spaceusedDBs ( database_name, database_size, unallocated, reserved, data, index_size, unused )	EXEC sp_msforeachdb @command1='use ? exec sp_spaceused @oneresultset = 1'  	select @@VERSION as [SQL Server Version], 	CAST(d.compatibility_level as varchar(10)) as'compatibility_level',TRY_CAST(d.is_encrypted as varchar(10)) is_encrypted,TRY_CAST(d.is_sync_with_backup as varchar(10)) as is_sync_with_backup,	COALESCE(CONVERT(VARCHAR(12), (bus.backup_finish_date), 101),'-') AS LastBackUpTime ,	TRY_CAST(d.create_date as varchar(20)) as create_date ,	TRY_CAST(d.user_access_desc as varchar(10)) as user_access_desc, TRY_CAST(dbsp.database_size as varchar(10)) as database_size,	 TRY_CAST(dbsp.unallocated as varchar(10)) as unallocated,TRY_CAST(dbsp.reserved as varchar(10)) as reserved	 ,	TRY_CAST( dbsp.data as varchar(10)) as data,TRY_CAST(dbsp.index_size as varchar(10)) index_size	 ,	 TRY_CAST(dbsp.unused as varchar(10)) unused	from 	master.sys.databases D	LEFT OUTER JOIN msdb.dbo.backupset bus ON bus.database_name = d.name 	INNER JOIN @tbl_sp_spaceusedDBs dbsp On dbsp.database_name=d.name	   where D.NAME  IN ( @DatabaseName)  ";
        public static  string GetDatabaseOptions = @" SELECT   TRY_CAST(d.compatibility_level as VARCHAR(100) ) as compatibility_level,   TRY_CAST(d.collation_name as VARCHAR(100) ) as collation_name,   TRY_CAST(d.user_access_desc as VARCHAR(100) ) as user_access_desc,   TRY_CAST(d.is_read_only as VARCHAR(100) ) as is_read_only,   TRY_CAST(d.is_auto_close_on as VARCHAR(100) ) as is_auto_close_on,   TRY_CAST(d.is_auto_shrink_on as VARCHAR(100) ) as is_auto_shrink_on,   TRY_CAST(d.state_desc as VARCHAR(100) ) as state,   TRY_CAST(d.is_cleanly_shutdown as VARCHAR(100) ) as is_cleanly_shutdown,   TRY_CAST(d.is_supplemental_logging_enabled as VARCHAR(100) ) as  is_supplemental_logging_enabled,   TRY_CAST(d.snapshot_isolation_state_desc as VARCHAR(100) ) as snapshot_isolation_state_desc,   TRY_CAST(d.is_read_committed_snapshot_on as VARCHAR(100) ) as is_read_committed_snapshot_on,   TRY_CAST(d.recovery_model_desc as VARCHAR(100) ) as recovery_model_desc,   TRY_CAST(d.page_verify_option_desc as VARCHAR(100) ) as page_verify_option_desc,   TRY_CAST(d.service_broker_guid as VARCHAR(100) ) as service_broker_guid FROM   master.sys.databases D WHERE   D.NAME IN    ( @DatabaseName ) ";
        public static  string GetDatabaseFiles = @"SELECT   MF.Name,   (      CASE         type_desc          WHEN            'ROWS'          THEN            'DATA'          ELSE            type_desc       END   )   FileType,    physical_name FileLocation, CONVERT(VARCHAR(20),MF.size / 128) as CurrentSizeMb,    (      CASE         CONVERT(VARCHAR(20), max_size)          WHEN            - 1          THEN            CONVERT(VARCHAR(20), 'Unlimited')          ELSE            CONVERT(VARCHAR(20), max_size / 128)       END   )   AS FileSize, CONVERT(VARCHAR(20), growth) + (    CASE      CONVERT(VARCHAR(20), is_percent_growth)       WHEN         1       THEN         CONVERT(VARCHAR(20), ' Percent')       ELSE         CONVERT(VARCHAR(20), ' Pages of 8KB')    END) AS GrowthType FROM   master.sys.master_files MF, master.sys.databases D WHERE   MF.database_id = D.database_id    AND D.NAME IN    (      @DatabaseName    )";
        public static  string AddSpExtendedproperty = @"EXECUTE sys.sp_addextendedproperty MS_Description,@Properydesc,schema,@schemaName,table,@tableName,column,@columnName";
        public static  string UpdateSpExtendedproperty = @" EXECUTE sys.sp_updateextendedproperty MS_Description,@Properydesc,schema,@schemaName,table,@tableName,column,@columnName";
        public static  string SelectFnListextendedproperty = @" SELECT *  FROM::fn_listextendedproperty (MS_Description,@Properydesc,schema,@schemaName,table,@tableName,column,@columnName)";
        public static  string DeleteSpDropextendedproperty = @"EXECUTE sys.sp_dropextendedproperty  MS_Description,@Properydesc,schema,@schemaName,table,@tableName,column,@columnName";
        public static  string GetListOfExtendedPropertiesList = @" SELECT     distinct sep.Name  FROM   sys.tables t left JOIN     sys.extended_properties sep ON t.object_id = sep.major_id where sep.Name  is not null";
        public static  string GetFunctionsWithDescription = @"SELECT ((SCHEMA_NAME(O.SCHEMA_ID) )+'.'+ O.[NAME])AS 'SQL_TABLE_VALUED_FUNCTION' ,sep.value FROM  SYS.SQL_MODULES M INNER JOIN SYS.OBJECTS O  ON M.OBJECT_ID=O.OBJECT_ID INNER JOIN sys.extended_properties sep ON o.object_id=sep.major_id  WHERE O.TYPE=@function_Type  and     sep.Name = 'MS_Description'    AND sep.minor_id = 0  ";
        public static  string GetFunctionProperties = @"SELECT CAST(uses_ansi_nulls as varchar(100)) uses_ansi_nulls , CAST(uses_quoted_identifier as varchar(100)) as uses_quoted_identifier,CAST(create_date as varchar(100)) create_date,CAST(modify_date as varchar(100)) modify_date,CAST( o.name as varchar(100)) [name] FROM  SYS.SQL_MODULES M INNER JOIN SYS.OBJECTS O  ON M.OBJECT_ID=O.OBJECT_ID WHERE O.TYPE=@function_Type    and o.name=@function_name";
        public static  string GetFunctionParameters = @"SELECT   ISNULL(   o.name,'@Return Parameter ') as  'name' ,   Convert(NVARCHAR(MAX) ,type_name(user_type_id)  ) as [type] ,      CONVERT(NVARCHAR(20),max_length) as max_length ,  CONVERT(NVARCHAR(50), (case when type_name(system_type_id) = 'uniqueidentifier'               then precision                else OdbcPrec(system_type_id, max_length, precision) end)) AS Prec,     CONVERT(NVARCHAR(100), OdbcScale(system_type_id, scale)) as Scale,   parameter_id as Param_order,     'Collation'   = convert(sysname,                    case when system_type_id in (35, 99, 167, 175, 231, 239)                     then ServerProperty('collation') end)  , 		 		   sep.value  AS [Extendedproperty]     FROM   SYS.SQL_MODULES M  INNER JOIN SYS.OBJECTS Obj  ON M.OBJECT_ID=Obj.OBJECT_ID   INNER JOIN sys.extended_properties sep ON Obj.object_id=sep.major_id    INNER JOIN sys.parameters o ON sep.major_id = O.object_id        WHERE Obj.TYPE=@function_Type  and     sep.Name = 'MS_Description'    AND sep.minor_id = 0 and O.object_id = object_id(@function_name) ";
        public static  string GetFunctionCreateScript = @"SELECT [definition] as createFunctionscript FROM   SYS.SQL_MODULES M  INNER JOIN SYS.OBJECTS Obj  ON M.OBJECT_ID=Obj.OBJECT_ID   INNER JOIN sys.extended_properties sep ON Obj.object_id=sep.major_id    INNER JOIN sys.parameters o ON sep.major_id = O.object_id        WHERE Obj.TYPE=@function_Type  and     sep.Name = 'MS_Description'    AND sep.minor_id = 0 and O.object_id = object_id(@function_name) ";
        public static  string GetFunctionDependencies = @"declare @Table table ( [name] varchar(100), [type] varchar(100), updated varchar(100), selected varchar(100), column_name varchar(100) )INSERT INTO @Table exec sp_depends @function_name select * from @Table  ";
        public static  string UpdateFunctionExtendedProperty = @"EXEC sys.sp_updateextendedproperty @name=N'MS_Description', @value=@fun_value,@level0type=N'SCHEMA',@level0name=@Schema_Name,@level1type=N'FUNCTION',@level1name=@FunctionName";
        public static  string CreateFunctionExtendedProperty = @"EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=@fun_value,@level0type=N'SCHEMA',@level0name=@Schema_Name,@level1type=N'FUNCTION',@level1name=@FunctionName";
        public static  string GetSchemaWithDescriptions = @" SELECT sch.name ,''FROM sys.schemas sch where schema_id<=100 ";
        public static  string GetSchemaInfoByName = @"";
        public static  string GetSchemaReferences = @"select name as table_name from sys.tables where schema_name(schema_id) = @schema_id order by name;";
        public static  string GetSchemaMsDescription = @" SELECT CONVERT(NVARCHAR(500),value) as desciption FROM sys.extended_properties ep left JOIN sys.schemas sch ON class=3 AND ep.major_id=SCHEMA_ID  where ep.class=3 and sch.name =@schemaName";
        public static  string UpdateSchemaColumnExtendedProperty = @"EXEC sys.sp_updateextendedproperty @name=N'MS_Description', @value=@Schema_info ,@level0type=N'SCHEMA',@level0name=@SchemaName";
        public static  string CreateSchemaColumnExtendedProperty = @"EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=@Schema_info ,@level0type=N'SCHEMA',@level0name=@SchemaName";
        public static  string GetCurrentDataBaseName = @"SELECT DB_NAME() AS [Current_Database]";
        public static  string GetDatabaseNames = @"SELECT CONVERT(VARCHAR(20),name) as databaseName FROM master.dbo.sysdatabases where name not in ('master','tempdb','model','msdb')";
        public static  string GetServerName = @"SELECT @@SERVERNAME as SERVERNAME ";
        public static  string GetTables = @"[sys].[sp_tables]";
        public static  string GetTableColumns = @"SELECT  c.name AS columnname FROM sys.tables AS t INNER JOIN sys.columns c ON t.OBJECT_ID = c.OBJECT_ID WHERE t.name LIKE '%@tableName%' ";
        public static  string GetTigger = @"SELECT ((SCHEMA_NAME(O.SCHEMA_ID) )+'.'+ [NAME])AS 'Tiggers' FROM SYS.SQL_MODULES M INNER JOIN SYS.OBJECTS O ON M.OBJECT_ID=O.OBJECT_ID                                                               WHERE O.TYPE='TR'";
        public static  string GetScalarFunctions = @"SELECT ((SCHEMA_NAME(O.SCHEMA_ID) )+'.'+ [NAME])AS 'SQL_SCALAR_FUNCTION' FROM SYS.SQL_MODULES M INNER JOIN SYS.OBJECTS O ON M.OBJECT_ID=O.OBJECT_ID                                                              WHERE O.TYPE='FN'";
        public static  string GetTableValueFunctions = @"SELECT ((SCHEMA_NAME(O.SCHEMA_ID) )+'.'+ [NAME])AS 'SQL_TABLE_VALUED_FUNCTION' FROM SYS.SQL_MODULES M INNER JOIN SYS.OBJECTS O ON M.OBJECT_ID=O.OBJECT_ID                                                              WHERE O.TYPE='TF'";
        public static  string GetAggregateFunctions = @"SELECT ((SCHEMA_NAME(O.SCHEMA_ID) )+'.'+ [NAME])AS 'SQL_AGGREGATE_FUNCTION' FROM SYS.SQL_MODULES M INNER JOIN SYS.OBJECTS O ON M.OBJECT_ID=O.OBJECT_ID                                                              WHERE O.TYPE='IF'";
        public static  string GetUserDefinedDataType = @"SELECT (SCHEMA_NAME(SCHEMA_ID) +'.'+[NAME])AS 'USERDEFINEDDATATYPE' FROM SYS.TYPES                                                               WHERE IS_USER_DEFINED = 1";
        public static  string GetXmlSchemas = @"SELECT DISTINCT (SCHEMA_NAME(SCHEMA_ID)+'.'+XSC.NAME) AS 'NAME' FROM    SYS.XML_SCHEMA_COLLECTIONS XSC JOIN SYS.XML_SCHEMA_NAMESPACES XSN  ON (XSC.XML_COLLECTION_ID = XSN.XML_COLLECTION_ID)";
        public static  string GetAdvancedServerSettings = @" select  value_name as istrName , CAST(value_data as VARCHAR(1000))as   istrValue   from sys.dm_server_registry";
        public static  string GetStoreProceduresWithDescription = @"SELECT   CONVERT(NVARCHAR(500),((SCHEMA_NAME(O.SCHEMA_ID) )+'.'+ O.[NAME])) AS 'istrName' , Convert(nvarchar(500),EP.VALUE) AS [istrValue] FROM SYS.EXTENDED_PROPERTIES EP LEFT JOIN SYS.OBJECTS O ON EP.MAJOR_ID = O.OBJECT_ID   WHERE O.TYPE='P' AND   CLASS_DESC='OBJECT_OR_COLUMN'      UNION 	SELECT CONVERT(NVARCHAR(500),((SCHEMA_NAME(O.SCHEMA_ID) )+'.'+ O.[NAME])) AS 'istrName'  ,'' AS [istrValue]     FROM SYS.OBJECTS O  WHERE O.TYPE='P'  ";
        public static  string GetStoreProcDependencies = @"SELECT OBJECT_SCHEMA_NAME ( referencing_id ) 	+ '.' +     OBJECT_NAME(referencing_id) AS referencing_object_name,     obj.type_desc AS referencing_object_type,     referenced_schema_name + '.' +     referenced_entity_name As referenced_object_name FROM sys.sql_expression_dependencies AS sed INNER JOIN sys.objects AS obj ON sed.referencing_id = obj.object_id WHERE referencing_id =OBJECT_ID(@StoreprocName)";
        public static  string GetStoreProceduresParametersWithDescriptions = @"select     'Parameter_name' = o.name,     'Type'   = type_name(user_type_id),     'Length'   = max_length,     'Prec'   = case when type_name(system_type_id) = 'uniqueidentifier'               then precision                else OdbcPrec(system_type_id, max_length, precision) end,     'Scale'   = OdbcScale(system_type_id, scale),     'Param_order'  = parameter_id,     'Collation'   = convert(sysname,                    case when system_type_id in (35, 99, 167, 175, 231, 239)                     then ServerProperty('collation') end)  , 				   ep.value  AS [Extendedproperty]  			      from sys.parameters o LEFT JOIN sys.extended_properties EP               				  ON 						ep.major_id = O.object_id and ep.minor_id=o.parameter_id where   object_id = object_id(@StoreprocName)";
        public static  string GetStoreProcedureCreateScript = @"SELECT  SCHEMA_NAME(schema_id)+'.'+[name] as StoreProc_name, object_definition(object_id) as [Proc Definition]FROM sys.objects WHERE type='P' and (SCHEMA_NAME(schema_id)+'.'+[name] )=@StoreprocName";
        public static  string GetExecutionPlan = @"SELECT  TOP 1  CAST( qp.query_plan as varchar(max)) as  query_plan,      CAST( CP.usecounts as VARCHAR(1000)) as usecounts,        CAST( cp.cacheobjtype AS VARCHAR(100)) AS CacheObjectType,        CAST( cp.size_in_bytes AS VARCHAR(01000)) AS Size_In_Byte,         CAST( SQLText.text as varchar(1000)) as SQLTEXT  FROM sys.dm_exec_cached_plans AS CP  CROSS APPLY sys.dm_exec_sql_text( plan_handle)AS SQLText  CROSS APPLY sys.dm_exec_query_plan( plan_handle)AS QP  WHERE objtype = 'Adhoc' and cp.cacheobjtype = 'Compiled Plan'";
        public static  string GetExecutionPlanOfStoreProc = @"SELECT   CAST([qp].[query_plan] as varchar(MAX)) as query_plan  , '' as usecounts,'' as CacheObjectType, '' as Size_In_Byte,'' as SQLTEXT  FROM       [sys].[dm_exec_procedure_stats] AS [ps]       JOIN [sys].[dm_exec_query_stats] AS [qs] ON [ps].[plan_handle] = [qs].[plan_handle]       CROSS APPLY [sys].[dm_exec_query_plan]([qs].[plan_handle]) AS [qp]WHERE     OBJECT_NAME([ps].[object_id], [ps].[database_id])  = @StoreprocName";
        public static  string GetStoreProcMsDescription = @"SELECT  ((SCHEMA_NAME(O.SCHEMA_ID) )+'.'+ O.[NAME])AS 'desciption' , ep.value AS [Extended property]  FROM sys.extended_properties EP LEFT JOIN SYS.OBJECTS O ON ep.major_id = O.object_id  WHERE O.TYPE='P' and class_desc='OBJECT_OR_COLUMN' and ((SCHEMA_NAME(O.SCHEMA_ID) )+'.'+ O.[NAME])=@StoreprocName";
        public static  string UpdateStoreProcExtendedProperty = @"EXEC                 sys.sp_updateextendedproperty                 N'MS_Description',                 @sp_value ,                 N'SCHEMA',                @Schema_Name,                 N'PROCEDURE',                @sp_Name";
        public static  string InsertStoreProcExtendedProperty = @"EXEC                sys.sp_addextendedproperty                N'MS_Description',                @sp_value ,                N'SCHEMA',                @Schema_Name,                N'PROCEDURE',                @sp_Name";
        public static  string UpdateStoreProcParameterExtendedProperty = @"EXEC                sys.sp_updateextendedproperty                N'MS_Description',                @sp_value ,                N'SCHEMA',                @Schema_Name,                N'PROCEDURE',                @sp_Name,                 N'PARAMETER',                 @parmeterName";
        public static  string InsertStoreProcParameterExtendedProperty = @"EXEC                sys.sp_addextendedproperty                N'MS_Description',                @sp_value ,                N'SCHEMA',                @Schema_Name,                N'PROCEDURE',                @sp_Name,                 N'PARAMETER',                 @parmeterName";
        public static  string GetTableCreateScript = @"DECLARE @object_name SYSNAME,         @object_id   INT  SELECT @object_name = '[' + s.NAME + '].[' + o.NAME + ']',        @object_id = o.[object_id] FROM   sys.objects o WITH (nowait)        JOIN sys.schemas s WITH (nowait)          ON o.[schema_id] = s.[schema_id] WHERE  s.NAME + '.' + o.NAME = @table_name        AND o.[type] = 'U'        AND o.is_ms_shipped = 0 DECLARE @SQL NVARCHAR(max) = ''; WITH index_column      AS   (SELECT 				ic.[object_id],                 ic.index_id,                 ic.is_descending_key,                 ic.is_included_column,                 c.NAME          FROM   sys.index_columns ic WITH (nowait)                 JOIN sys.columns c WITH (nowait)                   ON ic.[object_id] = c.[object_id]                      AND ic.column_id = c.column_id          WHERE  ic.[object_id] = @object_id),      fk_columns      AS (SELECT k.constraint_object_id,                 cname = c.NAME,                 rcname = rc.NAME          FROM   sys.foreign_key_columns k WITH (nowait)                 JOIN sys.columns rc WITH (nowait)                   ON rc.[object_id] = k.referenced_object_id                      AND rc.column_id = k.referenced_column_id                 JOIN sys.columns c WITH (nowait)                   ON c.[object_id] = k.parent_object_id                      AND c.column_id = k.parent_column_id          WHERE  k.parent_object_id = @object_id) SELECT @SQL = 'CREATE TABLE ' + @object_name + Char(13) + '('               + Char(13)               + Stuff(( SELECT Char(9) + ', [' + c.NAME + '] ' + CASE WHEN                      c.is_computed = 1 THEN 'AS ' + cc.[definition] ELSE Upper(               tp.NAME)                      + CASE WHEN                      tp.NAME IN ('varchar', 'char', 'varbinary', 'binary',               'text') THEN                      '(' + CASE WHEN c.max_length = -1 THEN 'MAX' ELSE                      Cast(c.max_length AS VARCHAR(5)) END + ')' WHEN tp.NAME IN               (                      'nvarchar', 'nchar',                      'ntext') THEN '(' + CASE WHEN c.max_length = -1 THEN 'MAX'               ELSE                      Cast(c.max_length / 2 AS VARCHAR(5)) END + ')' WHEN tp.NAME               IN (                      'datetime2', 'time2', 'datetimeoffset') THEN '(' +               Cast(c.scale AS                      VARCHAR(5)) + ')' WHEN tp.NAME = 'decimal' THEN '(' +                      Cast(c.[precision] AS VARCHAR(5)) + ',' + Cast(c.scale AS               VARCHAR(                      5)) + ')' ELSE                      '' END + CASE WHEN c.collation_name IS NOT NULL THEN               ' COLLATE ' +                      c.collation_name ELSE '' END + CASE WHEN c.is_nullable = 1               THEN                      ' NULL' ELSE ' NOT NULL' END + CASE WHEN dc.[definition] IS               NOT                      NULL THEN ' DEFAULT' + dc.[definition] ELSE '' END + CASE               WHEN                      ic.is_identity = 1 THEN ' IDENTITY(' +               Cast(Isnull(ic.seed_value,                      '0') AS CHAR(                      1)) + ',' + Cast(Isnull(ic.increment_value, '1') AS CHAR(1)               ) + ')'                      ELSE '' END END + Char(13) FROM sys.columns c WITH (nowait)               JOIN                      sys.types tp WITH (nowait) ON c.user_type_id =               tp.user_type_id                      LEFT JOIN sys.computed_columns cc WITH (nowait) ON               c.[object_id] =                      cc.[object_id] AND c.column_id = cc.column_id LEFT JOIN                      sys.default_constraints dc WITH (nowait) ON               c.default_object_id !=                      0 AND c.[object_id]                      = dc.parent_object_id AND c.column_id = dc.parent_column_id               LEFT                      JOIN sys.identity_columns ic WITH (nowait) ON c.is_identity               = 1                      AND c.[object_id] = ic.[object_id] AND c.column_id =               ic.column_id                      WHERE c.[object_id] = @object_id ORDER BY c.column_id FOR               xml path                      (''), type).value('.', 'NVARCHAR(MAX)'), 1, 2, Char(9) +               ' ')               + Isnull((SELECT Char(9) + ', CONSTRAINT [' + k.NAME +               '] PRIMARY KEY ('                      + (SELECT Stuff(( SELECT ', [' + c.NAME + '] ' + CASE WHEN                      ic.is_descending_key = 1 THEN 'DESC' ELSE 'ASC' END FROM                      sys.index_columns ic WITH (                      nowait) JOIN sys.columns c WITH (nowait) ON c.[object_id] =                      ic.[object_id] AND c.column_id = ic.column_id WHERE                      ic.is_included_column = 0                      AND ic.[object_id] = k.parent_object_id AND ic.index_id =                      k.unique_index_id FOR xml path(N''), type).value('.',                      'NVARCHAR(MAX)'), 1, 2, ''))                      + ')' + Char(13) FROM sys.key_constraints k WITH (nowait)               WHERE                      k.parent_object_id = @object_id AND k.[type] = 'PK'), '')               + ')' + Char(13) + Isnull((SELECT ( SELECT Char(13) +               'ALTER TABLE ' +                      @object_name + ' WITH' + CASE WHEN fk.is_not_trusted = 1               THEN                      ' NOCHECK' ELSE ' CHECK' END + ' ADD CONSTRAINT [' +               fk.NAME +                      '] FOREIGN KEY(' + Stuff(( SELECT ', [' + k.cname + ']'               FROM                      fk_columns k WHERE k.constraint_object_id = fk.[object_id]               FOR xml                      path(''), type).value('.', 'NVARCHAR(MAX)'), 1, 2, '') +               ')' +                      ' REFERENCES [' + Schema_name(ro.[schema_id]) + '].[' +               ro.NAME +                      '] (' + Stuff(( SELECT ', [' + k.rcname + ']' FROM               fk_columns k                      WHERE k.constraint_object_id = fk.[object_id] FOR xml path(               ''),                      type).value('.', 'NVARCHAR(MAX)'), 1, 2, '') + ')' + CASE               WHEN                      fk.delete_referential_action = 1 THEN ' ON DELETE CASCADE'               WHEN                      fk.delete_referential_action                      = 2 THEN ' ON DELETE SET NULL' WHEN               fk.delete_referential_action =                      3 THEN ' ON DELETE SET DEFAULT' ELSE '' END + CASE WHEN                      fk.update_referential_action = 1 THEN ' ON UPDATE CASCADE'               WHEN                      fk.update_referential_action                      = 2 THEN ' ON UPDATE SET NULL' WHEN               fk.update_referential_action =                      3 THEN ' ON UPDATE SET DEFAULT' ELSE '' END + Char(13) +                      'ALTER TABLE ' + @object_name + ' CHECK CONSTRAINT [' +               fk.NAME +                      ']' + Char(13) FROM sys.foreign_keys fk WITH (nowait) JOIN                      sys.objects ro WITH (nowait) ON ro.[object_id] =                      fk.referenced_object_id                      WHERE fk.parent_object_id = @object_id FOR xml path(N''),                      type).value('.', 'NVARCHAR(MAX)')), '')               + Isnull(((SELECT Char(13) + 'CREATE' + CASE WHEN i.is_unique = 1               THEN                      ' UNIQUE' ELSE '' END + ' NONCLUSTERED INDEX [' + i.NAME +               '] ON '                      + @object_name + ' (' + Stuff(( SELECT ', [' + c.NAME + ']'               + CASE                      WHEN c.is_descending_key = 1 THEN ' DESC' ELSE ' ASC' END               FROM                      index_column c WHERE c.is_included_column = 0 AND               c.index_id =                      i.index_id FOR xml path(''), type).value('.',               'NVARCHAR(MAX)'), 1,                      2, '') +                      ')' + Isnull(Char(13) + 'INCLUDE (' + Stuff(( SELECT ', ['               +                      c.NAME + ']' FROM index_column c WHERE c.is_included_column               = 1                      AND                      c.index_id = i.index_id FOR xml path(''), type).value('.',                      'NVARCHAR(MAX)'),                      1, 2, '') + ')', '') + Char(13) FROM sys.indexes i WITH (               nowait)                      WHERE i.[object_id] = @object_id AND i.is_primary_key = 0               AND                      i.[type] = 2 FOR xml path(''), type).value('.',               'NVARCHAR(MAX)') )                      , '') SELECT @SQL AS createscript ";
        public static  string GetTablesColumn = @"SELECT   TRY_CAST(colm.table_name as varchar(100)) AS TableName,   colm.table_schema + '.' + colm.table_name as tableWithSchemaname,   TRY_CAST( colm.column_name as varchar(100)) AS columnname,   CASE      i.is_primary_key       WHEN         1       THEN         'Yes'       ELSE         'No'    END   [key],    CASE      idc.is_identity       WHEN         1       THEN         'Yes'       ELSE         'No'    END   [identity], TRY_CAST(colm.data_type as varchar(100)) AS [data_type], TRY_CAST(colm.character_maximum_length as varchar(100)) AS [max_length], TRY_CAST(colm.is_nullable as varchar(100)) AS [allow_null], TRY_CAST(colm.column_default as varchar(100)) AS [defaultValue],    (      SELECT         value       FROM         ::fn_listextendedproperty ('MS_Description', 'schema', colm.table_schema, 'table', colm.table_name, 'column', colm.column_name)   )   AS [description] FROM   sys.tables t    LEFT JOIN      sys.columns c       ON c.object_id = t.object_id    LEFT JOIN      sys.identity_columns idc       ON idc.object_id = t.object_id       AND idc.column_id = c.column_id       AND idc.is_identity = 1   LEFT JOIN      sys.index_columns ic       ON ic.object_id = t.object_id       AND ic.column_id = c.column_id    LEFT JOIN      sys.indexes i       ON i.object_id = t.object_id       AND i.index_id = ic.index_id       AND i.is_primary_key = 1   INNER JOIN      information_schema.columns colm       ON colm.table_name = t.NAME WHERE   t.type = 'U'    AND (      idc.is_identity = 1       OR i.is_primary_key = 1       OR c.NAME = 'ID'   )";
        public static  string GetTablesColumnWithTableName = @"SELECT   TRY_CAST(colm.table_name as varchar(100)) AS TableName,   colm.table_schema + '.' + colm.table_name as tableWithSchemaname,   TRY_CAST( colm.column_name as varchar(100)) AS columnname,   CASE      i.is_primary_key       WHEN         1       THEN         'Yes'       ELSE         'No'    END   [key],    CASE      idc.is_identity       WHEN         1       THEN         'Yes'       ELSE         'No'    END   [identity], TRY_CAST(colm.data_type as varchar(100)) AS [data_type], TRY_CAST(colm.character_maximum_length as varchar(100)) AS [max_length], TRY_CAST(colm.is_nullable as varchar(100)) AS [allow_null], TRY_CAST(colm.column_default as varchar(100)) AS [defaultValue],    (      SELECT         value       FROM         ::fn_listextendedproperty ('MS_Description', 'schema', colm.table_schema, 'table', colm.table_name, 'column', colm.column_name)   )   AS [description] FROM   sys.tables t    LEFT JOIN      sys.columns c       ON c.object_id = t.object_id    LEFT JOIN      sys.identity_columns idc       ON idc.object_id = t.object_id       AND idc.column_id = c.column_id       AND idc.is_identity = 1   LEFT JOIN      sys.index_columns ic       ON ic.object_id = t.object_id       AND ic.column_id = c.column_id    LEFT JOIN      sys.indexes i       ON i.object_id = t.object_id       AND i.index_id = ic.index_id       AND i.is_primary_key = 1   INNER JOIN      information_schema.columns colm       ON colm.table_name = t.NAME WHERE   t.type = 'U'    AND (      idc.is_identity = 1       OR i.is_primary_key = 1       OR c.NAME = 'ID'   ) AND (colm.table_schema + '.' + colm.table_name) = @tblName";
        public static  string GetTablesWithDescription = @"SELECT    t.Name as istrName , SCHEMA_NAME(schema_id)+'.'+t.name as istrFullName,CONVERT(VARCHAR(500),sep.value) as istrValue ,SCHEMA_NAME(schema_id) as istrSchemaName   FROM     sys.tables t left JOIN     sys.extended_properties sep ON t.object_id = sep.major_id and sep.Name is not null   AND sep.minor_id = 0   order by t.Name  "; 
        public static  string GetTablesIndex = @"select i.[name] as index_name,    substring(column_names, 1, len(column_names)-1) as [columns],    case when i.[type] = 1 then 'Clustered index'        when i.[type] = 2 then 'Nonclustered unique index'        when i.[type] = 3 then 'XML index'        when i.[type] = 4 then 'Spatial index'        when i.[type] = 5 then 'Clustered columnstore index'        when i.[type] = 6 then 'Nonclustered columnstore index'        when i.[type] = 7 then 'Nonclustered hash index'        end as index_type,    case when i.is_unique = 1 then 'Unique'        else 'Not unique' end as [unique],    schema_name(t.schema_id) + '.' + t.[name] as tableView,     case when t.[type] = 'U' then 'Table'        when t.[type] = 'V' then 'View'        end as [object_Type]from sys.objects t    inner join sys.indexes i        on t.object_id = i.object_id    cross apply (select col.[name] + ', '                    from sys.index_columns ic                        inner join sys.columns col                            on ic.object_id = col.object_id                            and ic.column_id = col.column_id                    where ic.object_id = t.object_id                        and ic.index_id = i.index_id                            order by col.column_id                            for xml path ('') ) D (column_names)where t.is_ms_shipped <> 1 and index_id > 0 order by i.[name]";
        public static string  GetTableIndex = @"select i.[name] as index_name,    substring(column_names, 1, len(column_names)-1) as [columns],    case when i.[type] = 1 then 'Clustered index'        when i.[type] = 2 then 'Nonclustered unique index'        when i.[type] = 3 then 'XML index'        when i.[type] = 4 then 'Spatial index'        when i.[type] = 5 then 'Clustered columnstore index'        when i.[type] = 6 then 'Nonclustered columnstore index'        when i.[type] = 7 then 'Nonclustered hash index'        end as index_type,    case when i.is_unique = 1 then 'Unique'        else 'Not unique' end as [unique],    schema_name(t.schema_id) + '.' + t.[name] as tableView,     case when t.[type] = 'U' then 'Table'        when t.[type] = 'V' then 'View'        end as [object_Type]from sys.objects t    inner join sys.indexes i        on t.object_id = i.object_id    cross apply (select col.[name] + ', '                    from sys.index_columns ic                        inner join sys.columns col                            on ic.object_id = col.object_id                            and ic.column_id = col.column_id                    where ic.object_id = t.object_id                        and ic.index_id = i.index_id                            order by col.column_id                            for xml path ('') ) D (column_names)where t.is_ms_shipped <> 1 and index_id > 0 AND (schema_name(t.schema_id) + '.' + t.[name]) =@tblName order by i.[name]";
        public static  string GetTableDescription = @"SELECT CONVERT(NVARCHAR(500),sep.value) as desciption FROM     sys.tables t INNER JOIN     sys.extended_properties sep ON t.object_id = sep.major_id where     sep.Name = 'MS_Description'    AND sep.minor_id = 0    and SCHEMA_NAME(t.schema_id)+'.'+t.name=@tblName";
        public static  string GetTableDependencies = @"declare @Table table ([name] varchar(100),[object_type] varchar(1000))INSERT INTO @Table exec sp_depends @tblName  select * from @Table where [object_type]   not in('check cns')";
        public static  string GetTableForeignKeys = @"SELECT   COALESCE(ep.value, '') AS [values] ,     ob.name      AS Fk_name,    sch.name      AS [schema_name],    tab1.name     AS [current_table_name],    col1.name     AS [current_table_fk_columnName],  SCHEMA_NAME(tab2.schema_id) +'.'+ tab2.name     AS [fk_refe_table_name],    col2.name     AS [fk_ref_table_column_name] FROM sys.objects ob LEFT OUTER JOIN sys.extended_properties ep ON ep.major_id = ob.object_id  inner join sys.foreign_key_columns fkc ON   ob.object_id = fkc.constraint_object_id INNER JOIN sys.tables tab1    ON tab1.object_id = fkc.parent_object_id INNER JOIN sys.schemas sch    ON tab1.schema_id = sch.schema_id INNER JOIN sys.columns col1    ON col1.column_id = parent_column_id AND col1.object_id = tab1.object_id INNER JOIN sys.tables tab2    ON tab2.object_id = fkc.referenced_object_id INNER JOIN sys.columns col2    ON col2.column_id = referenced_column_id         AND col2.object_id =  tab2.object_id AND ep.class = 1AND ep.minor_id = 0 AND ep.name='MS_Description'WHERE ob.is_ms_shipped = 0  and (sch.name +'.'+ tab1.name)=@tblName";
        public static  string GetTableKeyConstraints = @"select table_view,    object_type,     Constraint_type,    Constraint_name,    Constraint_details from (    select schema_name(t.schema_id) + '.' + t.[name] as table_view,         case when t.[type] = 'U' then 'Table'            when t.[type] = 'V' then 'View'            end as [object_type],        case when c.[type] = 'PK' then 'Primary key'            when c.[type] = 'UQ' then 'Unique constraint'            when i.[type] = 1 then 'Unique clustered index'            when i.type = 2 then 'Unique index'            end as constraint_type,         isnull(c.[name], i.[name]) as constraint_name,        substring(column_names, 1, len(column_names)-1) as [Constraint_details]    from sys.objects t        left outer join sys.indexes i            on t.object_id = i.object_id        left outer join sys.key_constraints c            on i.object_id = c.parent_object_id             and i.index_id = c.unique_index_id       cross apply (select col.[name] + ', '                        from sys.index_columns ic                            inner join sys.columns col                                on ic.object_id = col.object_id                                and ic.column_id = col.column_id                        where ic.object_id = t.object_id                            and ic.index_id = i.index_id                                order by col.column_id                                for xml path ('') ) D (column_names)    where is_unique = 1    and t.is_ms_shipped <> 1    union all     select schema_name(fk_tab.schema_id) + '.' + fk_tab.name as foreign_table,        'Table',        'Foreign key',        fk.name as fk_constraint_name,        schema_name(pk_tab.schema_id) + '.' + pk_tab.name    from sys.foreign_keys fk        inner join sys.tables fk_tab            on fk_tab.object_id = fk.parent_object_id        inner join sys.tables pk_tab            on pk_tab.object_id = fk.referenced_object_id        inner join sys.foreign_key_columns fk_cols            on fk_cols.constraint_object_id = fk.object_id    union all    select schema_name(t.schema_id) + '.' + t.[name],        'Table',        'Check constraint',        con.[name] as constraint_name,        con.[definition]    from sys.check_constraints con        left outer join sys.objects t            on con.parent_object_id = t.object_id        left outer join sys.all_columns col            on con.parent_column_id = col.column_id            and con.parent_object_id = col.object_id    union all    select schema_name(t.schema_id) + '.' + t.[name],        'Table',        'Default constraint',        con.[name],        col.[name] + ' = ' + con.[definition]    from sys.default_constraints con        left outer join sys.objects t            on con.parent_object_id = t.object_id        left outer join sys.all_columns col            on con.parent_column_id = col.column_id            and con.parent_object_id = col.object_id) a where a.table_view=@tblName order by table_view, constraint_type, constraint_name ";
        public static  string UpdateTableExtendedProperty = @"EXEC sys.sp_updateextendedproperty N'MS_Description',  @Table_value , N'SCHEMA', @Schema_Name, N'TABLE', @Table_Name";
        public static  string InsertTableExtendedProperty = @"EXEC sys.sp_addextendedproperty N'MS_Description',  @Table_value , N'SCHEMA', @Schema_Name, N'TABLE', @Table_Name";
        public static  string UpdateTableColumnExtendedProperty = @"EXEC sys.sp_updateextendedproperty @name=N'MS_Description', @value=@Column_value,@level0type=N'SCHEMA',@level0name=@Schema_Name,@level1type=N'TABLE',@level1name=@Table_Name,@level2type=N'COLUMN',@level2name=@Column_Name";
        public static  string InsertTableColumnExtendedProperty = @"EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=@Column_value,@level0type=N'SCHEMA',@level0name=@Schema_Name,@level1type=N'TABLE',@level1name=@Table_Name,@level2type=N'COLUMN',@level2name=@Column_Name";
        public static  string TableFragmentation = @"SELECT  SCHEMA_NAME(t.schema_id)+'.'+ t.name 'TableName',        i.name 'IndexName',        CAST(frag.avg_fragmentation_in_percent as VARCHAR(20)) 'PercentFragmented'FROM    sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL, NULL, NULL) frag JOIN    sys.tables t ON      frag.object_id = t.object_id JOIN    sys.indexes i ON      frag.index_id = i.index_id AND     frag.object_id = i.object_id WHERE         i.type != 0 AND     t.name != 'ThreadActionCount'   ORDER BY frag.avg_fragmentation_in_percent DESC";
        public static  string GetTableFkReferences = @"SELECT   CONVERT(nvarchar(500), (ob.NAME +'('+col1.name+'/'+col2.name+')'))  AS Fk_name,       CONVERT(NVARCHAR(200), tab1.NAME +' -> '+tab2.NAME) AS [fk_refe_table_name]  FROM   sys.objects ob         INNER JOIN sys.foreign_key_columns fkc                ON ob.object_id = fkc.constraint_object_id        INNER JOIN sys.tables tab1                ON tab1.object_id = fkc.parent_object_id        INNER JOIN sys.schemas sch                ON tab1.schema_id = sch.schema_id        INNER JOIN sys.columns col1                ON col1.column_id = parent_column_id                   AND col1.object_id = tab1.object_id        INNER JOIN sys.tables tab2                ON tab2.object_id = fkc.referenced_object_id        INNER JOIN sys.columns col2                ON col2.column_id = referenced_column_id                   AND col2.object_id = tab2.object_id   ";
        public static  string GetTableFkReferencesBySchemaName = @"SELECT        CONVERT(nvarchar(500), (ob.NAME +'('+col1.name+'/'+col2.name+')'))  AS Fk_name,       CONVERT(NVARCHAR(200), tab1.NAME +' -> '+tab2.NAME) AS [fk_refe_table_name]  FROM   sys.objects ob         INNER JOIN sys.foreign_key_columns fkc                ON ob.object_id = fkc.constraint_object_id        INNER JOIN sys.tables tab1                ON tab1.object_id = fkc.parent_object_id        INNER JOIN sys.schemas sch                ON tab1.schema_id = sch.schema_id        INNER JOIN sys.columns col1                ON col1.column_id = parent_column_id                   AND col1.object_id = tab1.object_id        INNER JOIN sys.tables tab2                ON tab2.object_id = fkc.referenced_object_id        INNER JOIN sys.columns col2                ON col2.column_id = referenced_column_id                   AND col2.object_id = tab2.object_id  where ob.schema_id=SCHEMA_ID(@SchemaName)";
        public static  string GetTriggers = @"select  trigg.NAME AS  'Tiggers' ,sep.value from sys.triggers trigg inner join sys.sql_modules module ON trigg.object_id=module.object_id left join sys.extended_properties sep ON sep.major_id=trigg.object_id where trigg.parent_id=0 union SELECT ((SCHEMA_NAME(O.SCHEMA_ID) )+'.'+ O.NAME)AS 'Tiggers' ,sep.value FROM SYS.SQL_MODULES M left JOIN SYS.OBJECTS O ON M.OBJECT_ID=O.OBJECT_ID left JOIN sys.extended_properties sep ON o.object_id=sep.major_id WHERE O.TYPE='TR'";
        public static  string GetTrigger = @"select * from (SELECT ((SCHEMA_NAME(O.SCHEMA_ID) )+'.'+ O.NAME)AS 'Tiggers' , sep.value ,m.definition,o.create_date,o.modify_date FROM  SYS.SQL_MODULES M INNER JOIN SYS.OBJECTS O ON M.OBJECT_ID=O.OBJECT_ID INNER JOIN sys.extended_properties sep ON o.object_id=sep.major_id WHERE O.TYPE='TR' UNION select   trigg.NAME AS 'Tiggers',   sep.value ,      module.definition,         ISNULL(ob.create_date,''),         ISNULL(ob.modify_date,'') from   sys.triggers trigg    inner join      sys.sql_modules module       ON trigg.object_id = module.object_id    left join      sys.extended_properties sep       ON sep.major_id = trigg.object_id   left join sys.objects ob on trigg.object_id=ob.object_id where   trigg.parent_id = 0 )  as Temp where Tiggers=@TiggersName";
        public static  string UpdateTriggerExtendedProperty = @"EXEC sys.sp_updateextendedproperty @name=N'MS_Description', @value=@Trigger_value,@level0type=N'TRIGGER',@level0name=@Trigger_Name";
        public static  string CreateTriggerExtendedProperty = @"EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=@Trigger_value,@level0type=N'TRIGGER',@level0name=@Trigger_Name";
        public static  string GetUserDefinedDataTypes = @"select SCHEMA_NAME(SCHEMA_ID)+'.'+name as Name ,is_nullable AS 'Allow Nulls', TYPE_NAME(system_type_id) as 'Base Type Name', max_length as 'Length' , CAST('CREATE TYPE '+SCHEMA_NAME(SCHEMA_ID)+'.'+name +' FROM  '+TYPE_NAME(system_type_id)+' ( '+CAST(+max_length AS nvarchar)+ ' ) ' +  CASE WHEN  is_nullable=1 THEN 'NULL' ELSE 'NOT NULL ' END  as nvarchar(100))as createscript  from  sys.types t    where is_user_defined = 1 ";
        public static  string GetUserDefinedDataTypeDetails = @"select SCHEMA_NAME(SCHEMA_ID)+'.'+name as Name,is_nullable AS 'Allow Nulls', TYPE_NAME(system_type_id) as 'Base Type Name', max_length as 'Length' , CAST('CREATE TYPE '+SCHEMA_NAME(SCHEMA_ID)+'.'+name +' FROM  '+TYPE_NAME(system_type_id)+' ( '+CAST(+max_length AS nvarchar)+ ' ) ' +  CASE WHEN  is_nullable=1 THEN 'NULL' ELSE 'NOT NULL ' END  as nvarchar(100))as createscript  from  sys.types t    where is_user_defined = 1 and    SCHEMA_NAME(SCHEMA_ID)+'.'+name =@TypeName";
        public static  string GetUsedDefinedDataTypeReference = @"select CONVERT(NVARCHAR(500),s.name +'.'+o.name ) as objectname ,o.type as typeofobject from sys.schemas s join sys.objects o    on o.schema_id = s.schema_id  join sys.columns c    on c.object_id = o.object_id  join sys.types t    on c.user_type_id = t.user_type_id and is_user_defined = 1   and SCHEMA_NAME(t.schema_id) +'.'+t.name=@TypeName";
        public static  string GetUsedDefinedDataTypeExtendedProperties = @"SELECT CONVERT(NVARCHAR(1000,value) as desciption FROM::fn_listextendedproperty ('MS_Description','SCHEMA',@SchemaName ,N'TYPE',@TypeName,null,null)";
        public static  string AddUserDefinedDataTypeExtendedProperty = @"EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=@desc , @level0type=N'SCHEMA',@level0name=@SchemaName, @level1type=N'TYPE',@level1name=@TypeName";
        public static  string UpdateUserDefinedDataTypeExtendedProperty = @"EXEC sys.sp_updateextendedproperty @name=N'MS_Description', @value=@desc , @level0type=N'SCHEMA',@level0name=@SchemaName, @level1type=N'TYPE',@level1name=@TypeName";
        public static  string GetViewsWithDescription = @"SELECT   ((SCHEMA_NAME(O.SCHEMA_ID) )+'.'+ O.[NAME])AS 'istrName' , CONVERT(NVARCHAR(1000),ep.value) AS istrValue FROM sys.extended_properties EP LEFT JOIN SYS.OBJECTS O ON ep.major_id = O.object_id  WHERE O.TYPE='V'";
        public static  string GetViewProperties = @"SELECT 	CAST(uses_ansi_nulls as VARCHAR(1)) as uses_ansi_nulls	,CAST(uses_quoted_identifier as VARCHAR(1)) as uses_quoted_identifier ,CAST( create_date as varchar(100)) as create_date,   CAST(modify_date as varchar(100)) as modify_date FROM  sys.views vs inner join sys.sql_modules   sqlM ON vs.object_id=sqlM.object_id where sqlM.object_id=OBJECT_ID(@viewname)";
        public static  string GetViewColumns = @"declare @Table table ([name] varchar(100),[type] varchar(1000),updated varchar(100),selected varchar(100),column_name varchar(1000))INSERT INTO @Table exec sp_depends @viewname select * from @Table";
        public static  string GetViewCreateScript = @"select sqlM.definition createViewScript FROM  sys.views vs inner join sys.sql_modules   sqlM ON vs.object_id=sqlM.object_id where sqlM.object_id=OBJECT_ID(@viewname)";
        public static  string GetViewsDependancies = @"declare @Table table ([name] varchar(100),[type] varchar(1000),updated varchar(100),selected varchar(100),column_name varchar(1000))INSERT INTO @Table exec sp_depends @viewnameselect DISTINCT name from @Table";
        public static string ObjectThatDependsOn = @"CREATE TABLE #references   (      thepath           VARCHAR(max),      thefullentityname VARCHAR(200),      thetype           VARCHAR(20),      iteration         INT   ) CREATE TABLE #databasedependencies   (      entityname        VARCHAR(200),      entitytype        CHAR(5),      dependencytype    CHAR(4),      thereferredentity VARCHAR(200),      thereferredtype   CHAR(5)   ) INSERT INTO #databasedependencies             (entityname,              entitytype,              dependencytype,              thereferredentity,              thereferredtype)  SELECT Object_schema_name(o.object_id) + '.' + o.NAME,        o.type,        'hard',        ty.NAME,        'UDT' FROM   sys.objects o        INNER JOIN sys.columns AS c                ON c.object_id = o.object_id        INNER JOIN sys.types ty                ON ty.user_type_id = c.user_type_id WHERE  is_user_defined = 1 UNION ALL  SELECT Object_schema_name(tt.type_table_object_id)        + '.' + tt.NAME,        'UDTT',        'hard',        ty.NAME,        'UDT' FROM   sys.table_types tt        INNER JOIN sys.columns AS c                ON c.object_id = tt.type_table_object_id        INNER JOIN sys.types ty                ON ty.user_type_id = c.user_type_id WHERE  ty.is_user_defined = 1 UNION ALL  SELECT Object_schema_name(o.object_id) + '.' + o.NAME,        o.type,        'hard',        Object_schema_name(t.object_id) + '.' + t.NAME,        t.type FROM   sys.objects t        INNER JOIN sys.objects AS o                ON o.parent_object_id = t.object_id WHERE  o.type = 'TR' UNION ALL  SELECT Object_schema_name(clmns.object_id) + '.'        + Object_name(clmns.object_id),        'U',        'hard',        Object_schema_name(o.object_id) + '.' + o.NAME,        o.type FROM   sys.objects o        INNER JOIN sys.columns AS clmns                ON clmns.default_object_id = o.object_id WHERE  o.parent_object_id = 0 UNION ALL  SELECT types.NAME,        'UDT',        'hard',        Object_schema_name(o.object_id) + '.' + o.NAME,        o.type FROM   sys.objects o        INNER JOIN sys.types AS types                ON types.default_object_id = o.object_id WHERE  o.parent_object_id = 0 UNION ALL  SELECT Object_schema_name(clmns.object_id) + '.'        + Object_name(clmns.object_id),        'U',        'hard',        Object_schema_name(o.object_id) + '.' + o.NAME,        o.type FROM   sys.objects o        INNER JOIN sys.columns AS clmns                ON clmns.rule_object_id = o.object_id UNION ALL  SELECT types.NAME,        'UDT',        'hard',        Object_schema_name(o.object_id) + '.' + o.NAME,        o.type FROM   sys.objects o        INNER JOIN sys.types AS types                ON types.rule_object_id = o.object_id UNION ALL  SELECT Object_schema_name(clmns.object_id) + '.'        + Object_name(clmns.object_id),        'U',        'hard',        xml_schema_collections.NAME,        'XMLC' FROM   sys.columns clmns         INNER JOIN sys.xml_schema_collections                ON xml_schema_collections.xml_collection_id =                   clmns.xml_collection_id UNION ALL  SELECT Object_schema_name(clmns.object_id) + '.'        + Object_name(clmns.object_id),        'UDTT',        'hard',        xml_schema_collections.NAME,        'XMLC' FROM   sys.columns AS clmns        INNER JOIN sys.table_types AS tt                ON tt.type_table_object_id = clmns.object_id        INNER JOIN sys.xml_schema_collections                ON xml_schema_collections.xml_collection_id =                   clmns.xml_collection_id UNION ALL  SELECT Object_schema_name(params.object_id) + '.'        + o.NAME,        o.type,        'hard',        xml_schema_collections.NAME,        'XMLC' FROM   sys.parameters AS params        INNER JOIN sys.xml_schema_collections                ON xml_schema_collections.xml_collection_id =                   params.xml_collection_id        INNER JOIN sys.objects o                ON o.object_id = params.object_id UNION ALL  SELECT Object_schema_name(tbl.object_id) + '.'        + tbl.NAME,        tbl.type,        'hard',        Object_schema_name(referenced_object_id)        + '.' + Object_name(referenced_object_id),        'U' FROM   sys.foreign_keys AS fk        INNER JOIN sys.tables AS tbl                ON tbl.object_id = fk.parent_object_id UNION ALL  SELECT Object_schema_name(params.object_id) + '.'        + o.NAME,        o.type,        'hard',        types.NAME,        'UDT' FROM   sys.parameters AS params        INNER JOIN sys.types                ON types.user_type_id = params.user_type_id        INNER JOIN sys.objects o                ON o.object_id = params.object_id WHERE  is_user_defined <> 0 UNION ALL  SELECT Object_schema_name(o.object_id) + '.' + o.NAME,        o.type,        'hard',        ps.NAME,        'PS' FROM   sys.indexes AS idx        INNER JOIN sys.partitions p                ON idx.object_id = p.object_id                   AND idx.index_id = p.index_id        INNER JOIN sys.partition_schemes ps                ON idx.data_space_id = ps.data_space_id        INNER JOIN sys.objects AS o                ON o.object_id = idx.object_id UNION ALL  SELECT ps.NAME,        'PS',        'hard',        Object_schema_name(o.object_id) + '.' + o.NAME,        o.type FROM   sys.partition_schemes ps        INNER JOIN sys.objects AS o                ON ps.function_id = o.object_id UNION ALL  SELECT pg.NAME,        'PG',        'hard',        Object_schema_name(o.object_id) + '.' + o.NAME,        o.type FROM   sys.objects o        INNER JOIN sys.plan_guides AS pg                ON pg.scope_object_id = o.object_id UNION ALL  SELECT s.NAME,        'SYN',        'hard',        Object_schema_name(o.object_id) + '.' + o.NAME,        o.type FROM   sys.objects o        INNER JOIN sys.synonyms AS s                ON Object_id(s.base_object_name) = o.object_id UNION ALL   SELECT s.NAME,        'SYN',        'hard',        Object_schema_name(o.object_id) + '.' + o.NAME,        o.type FROM   sys.objects o        INNER JOIN sys.sequences AS s                ON s.user_type_id = o.object_id UNION ALL SELECT DISTINCT COALESCE(Object_schema_name(referencing_id) + '.', '')                 + Object_name(referencing_id),                 referencer.type,                 'soft',                 COALESCE(referenced_schema_name + '.', '')                 +                  COALESCE(referenced_entity_name, ''),                 referenced.type FROM   sys.sql_expression_dependencies        INNER JOIN sys.objects referencer                ON referencing_id = referencer.object_id        INNER JOIN sys.objects referenced                ON referenced_id = referenced.object_id WHERE  referencing_class = 1        AND referenced_class = 1        AND referencer.type IN ( 'v', 'tf', 'fn', 'p',                                 'tr', 'u' ) DECLARE @RowCount INT DECLARE @ii INT  INSERT INTO #references             (thepath,              thefullentityname,              thetype,              iteration) SELECT COALESCE(Object_schema_name(object_id) + '.', '')        + NAME,        COALESCE(Object_schema_name(object_id) + '.', '')        + NAME,        type,        1 FROM   sys.objects WHERE  NAME LIKE @ObjectName  SELECT @rowcount = @@ROWCOUNT,        @ii = 2 IF 0 <> 0      WHILE @ii < 20         AND @rowcount > 0     BEGIN         INSERT INTO #references                     (thepath,                      thefullentityname,                      thetype,                      iteration)         SELECT DISTINCT thepath + '/' + thereferredentity,                         thereferredentity,                         thereferredtype,                         @ii         FROM   #databasedependencies DatabaseDependencies                INNER JOIN #references previousReferences                        ON previousReferences.thefullentityname = entityname                           AND previousReferences.iteration = @ii - 1         WHERE  thereferredentity <> entityname                AND thereferredentity NOT IN (SELECT thefullentityname                                              FROM   #references)         SELECT @rowcount = @@rowcount         SELECT @ii = @ii + 1     END ELSE  WHILE @ii < 20       AND @rowcount > 0   BEGIN       INSERT INTO #references                   (thepath,                    thefullentityname,                    thetype,                    iteration)       SELECT DISTINCT thepath + '/' + entityname,                       entityname,                       DatabaseDependencies.entitytype,                       @ii       FROM   #databasedependencies DatabaseDependencies              INNER JOIN #references previousReferences                      ON previousReferences.thefullentityname = thereferredentity                         AND previousReferences.iteration = @ii - 1       WHERE  thereferredentity <> entityname              AND entityname NOT IN (SELECT thefullentityname                                     FROM   #references)       SELECT @rowcount = @@rowcount       SELECT @ii = @ii + 1   END SELECT CONVERT(VARCHAR(MAX),ThePath) as ThePath, CONVERT(VARCHAR(MAX),TheFullEntityName) AS TheFullEntityName, CONVERT(VARCHAR(MAX),TheType), CONVERT(VARCHAR(MAX),iteration) AS iteration FROM   #references DROP TABLE #databasedependencies DROP TABLE #references ";
        public static string ObjectOnWhichDepends = @" CREATE TABLE #references   (      thepath           VARCHAR(max),      thefullentityname VARCHAR(200),      thetype           VARCHAR(20),      iteration         INT   ) CREATE TABLE #databasedependencies   (      entityname        VARCHAR(200),      entitytype        CHAR(5),      dependencytype    CHAR(4),      thereferredentity VARCHAR(200),      thereferredtype   CHAR(5)   ) INSERT INTO #databasedependencies             (entityname,              entitytype,              dependencytype,              thereferredentity,              thereferredtype)  SELECT Object_schema_name(o.object_id) + '.' + o.NAME,        o.type,        'hard',        ty.NAME,        'UDT' FROM   sys.objects o        INNER JOIN sys.columns AS c                ON c.object_id = o.object_id        INNER JOIN sys.types ty                ON ty.user_type_id = c.user_type_id WHERE  is_user_defined = 1 UNION ALL  SELECT Object_schema_name(tt.type_table_object_id)        + '.' + tt.NAME,        'UDTT',        'hard',        ty.NAME,        'UDT' FROM   sys.table_types tt        INNER JOIN sys.columns AS c                ON c.object_id = tt.type_table_object_id        INNER JOIN sys.types ty                ON ty.user_type_id = c.user_type_id WHERE  ty.is_user_defined = 1 UNION ALL  SELECT Object_schema_name(o.object_id) + '.' + o.NAME,        o.type,        'hard',        Object_schema_name(t.object_id) + '.' + t.NAME,        t.type FROM   sys.objects t        INNER JOIN sys.objects AS o                ON o.parent_object_id = t.object_id WHERE  o.type = 'TR' UNION ALL  SELECT Object_schema_name(clmns.object_id) + '.'        + Object_name(clmns.object_id),        'U',        'hard',        Object_schema_name(o.object_id) + '.' + o.NAME,        o.type FROM   sys.objects o        INNER JOIN sys.columns AS clmns                ON clmns.default_object_id = o.object_id WHERE  o.parent_object_id = 0 UNION ALL  SELECT types.NAME,        'UDT',        'hard',        Object_schema_name(o.object_id) + '.' + o.NAME,        o.type FROM   sys.objects o        INNER JOIN sys.types AS types                ON types.default_object_id = o.object_id WHERE  o.parent_object_id = 0 UNION ALL  SELECT Object_schema_name(clmns.object_id) + '.'        + Object_name(clmns.object_id),        'U',        'hard',        Object_schema_name(o.object_id) + '.' + o.NAME,        o.type FROM   sys.objects o        INNER JOIN sys.columns AS clmns                ON clmns.rule_object_id = o.object_id UNION ALL  SELECT types.NAME,        'UDT',        'hard',        Object_schema_name(o.object_id) + '.' + o.NAME,        o.type FROM   sys.objects o        INNER JOIN sys.types AS types                ON types.rule_object_id = o.object_id UNION ALL  SELECT Object_schema_name(clmns.object_id) + '.'        + Object_name(clmns.object_id),        'U',        'hard',        xml_schema_collections.NAME,        'XMLC' FROM   sys.columns clmns         INNER JOIN sys.xml_schema_collections                ON xml_schema_collections.xml_collection_id =                   clmns.xml_collection_id UNION ALL  SELECT Object_schema_name(clmns.object_id) + '.'        + Object_name(clmns.object_id),        'UDTT',        'hard',        xml_schema_collections.NAME,        'XMLC' FROM   sys.columns AS clmns        INNER JOIN sys.table_types AS tt                ON tt.type_table_object_id = clmns.object_id        INNER JOIN sys.xml_schema_collections                ON xml_schema_collections.xml_collection_id =                   clmns.xml_collection_id UNION ALL  SELECT Object_schema_name(params.object_id) + '.'        + o.NAME,        o.type,        'hard',        xml_schema_collections.NAME,        'XMLC' FROM   sys.parameters AS params        INNER JOIN sys.xml_schema_collections                ON xml_schema_collections.xml_collection_id =                   params.xml_collection_id        INNER JOIN sys.objects o                ON o.object_id = params.object_id UNION ALL  SELECT Object_schema_name(tbl.object_id) + '.'        + tbl.NAME,        tbl.type,        'hard',        Object_schema_name(referenced_object_id)        + '.' + Object_name(referenced_object_id),        'U' FROM   sys.foreign_keys AS fk        INNER JOIN sys.tables AS tbl                ON tbl.object_id = fk.parent_object_id UNION ALL  SELECT Object_schema_name(params.object_id) + '.'        + o.NAME,        o.type,        'hard',        types.NAME,        'UDT' FROM   sys.parameters AS params        INNER JOIN sys.types                ON types.user_type_id = params.user_type_id        INNER JOIN sys.objects o                ON o.object_id = params.object_id WHERE  is_user_defined <> 0 UNION ALL  SELECT Object_schema_name(o.object_id) + '.' + o.NAME,        o.type,        'hard',        ps.NAME,        'PS' FROM   sys.indexes AS idx        INNER JOIN sys.partitions p                ON idx.object_id = p.object_id                   AND idx.index_id = p.index_id        INNER JOIN sys.partition_schemes ps                ON idx.data_space_id = ps.data_space_id        INNER JOIN sys.objects AS o                ON o.object_id = idx.object_id UNION ALL  SELECT ps.NAME,        'PS',        'hard',        Object_schema_name(o.object_id) + '.' + o.NAME,        o.type FROM   sys.partition_schemes ps        INNER JOIN sys.objects AS o                ON ps.function_id = o.object_id UNION ALL  SELECT pg.NAME,        'PG',        'hard',        Object_schema_name(o.object_id) + '.' + o.NAME,        o.type FROM   sys.objects o        INNER JOIN sys.plan_guides AS pg                ON pg.scope_object_id = o.object_id UNION ALL  SELECT s.NAME,        'SYN',        'hard',        Object_schema_name(o.object_id) + '.' + o.NAME,        o.type FROM   sys.objects o        INNER JOIN sys.synonyms AS s                ON Object_id(s.base_object_name) = o.object_id UNION ALL   SELECT s.NAME,        'SYN',        'hard',        Object_schema_name(o.object_id) + '.' + o.NAME,        o.type FROM   sys.objects o        INNER JOIN sys.sequences AS s                ON s.user_type_id = o.object_id UNION ALL SELECT DISTINCT COALESCE(Object_schema_name(referencing_id) + '.', '')                 + Object_name(referencing_id),                 referencer.type,                 'soft',                 COALESCE(referenced_schema_name + '.', '')                 +                  COALESCE(referenced_entity_name, ''),                 referenced.type FROM   sys.sql_expression_dependencies        INNER JOIN sys.objects referencer                ON referencing_id = referencer.object_id        INNER JOIN sys.objects referenced                ON referenced_id = referenced.object_id WHERE  referencing_class = 1        AND referenced_class = 1        AND referencer.type IN ( 'v', 'tf', 'fn', 'p',                                 'tr', 'u' ) DECLARE @RowCount INT DECLARE @ii INT  INSERT INTO #references             (thepath,              thefullentityname,              thetype,              iteration) SELECT COALESCE(Object_schema_name(object_id) + '.', '')        + NAME,        COALESCE(Object_schema_name(object_id) + '.', '')        + NAME,        type,        1 FROM   sys.objects WHERE  NAME LIKE @ObjectName  SELECT @rowcount = @@ROWCOUNT,        @ii = 2 IF 1 <> 0      WHILE @ii < 20         AND @rowcount > 0     BEGIN         INSERT INTO #references                     (thepath,                      thefullentityname,                      thetype,                      iteration)         SELECT DISTINCT thepath + '/' + thereferredentity,                         thereferredentity,                         thereferredtype,                         @ii         FROM   #databasedependencies DatabaseDependencies                INNER JOIN #references previousReferences                        ON previousReferences.thefullentityname = entityname                           AND previousReferences.iteration = @ii - 1         WHERE  thereferredentity <> entityname                AND thereferredentity NOT IN (SELECT thefullentityname                                              FROM   #references)         SELECT @rowcount = @@rowcount         SELECT @ii = @ii + 1     END ELSE  WHILE @ii < 20       AND @rowcount > 0   BEGIN       INSERT INTO #references                   (thepath,                    thefullentityname,                    thetype,                    iteration)       SELECT DISTINCT thepath + '/' + entityname,                       entityname,                       DatabaseDependencies.entitytype,                       @ii       FROM   #databasedependencies DatabaseDependencies              INNER JOIN #references previousReferences                      ON previousReferences.thefullentityname = thereferredentity                         AND previousReferences.iteration = @ii - 1       WHERE  thereferredentity <> entityname              AND entityname NOT IN (SELECT thefullentityname                                     FROM   #references)       SELECT @rowcount = @@rowcount       SELECT @ii = @ii + 1   END SELECT CONVERT(VARCHAR(MAX),ThePath) as ThePath, CONVERT(VARCHAR(MAX),TheFullEntityName) AS TheFullEntityName, CONVERT(VARCHAR(MAX),TheType), CONVERT(VARCHAR(MAX),iteration) AS iteration FROM     #references DROP TABLE #databasedependencies DROP TABLE #references ";
        public static  string[] GetServerProperties =
                                                                {
                                                            @"SELECT LEFT(@@VERSION, CHARINDEX(' - ', @@VERSION)) ProductName",
                                                            @"SELECT SERVERPROPERTY('ProductMajorVersion') ProductMajorVersion",
                                                            @"SELECT SERVERPROPERTY('ProductBuild') ProductBuild ",
                                                            @"SELECT SERVERPROPERTY('InstanceDefaultLogPath') InstanceDefaultLogPath ",
                                                            @"SELECT SERVERPROPERTY('Edition') Edition ",
                                                            @"SELECT SERVERPROPERTY('BuildClrVersion') BuildClrVersion ",
                                                            @"SELECT SERVERPROPERTY('Collation') COLLATION",
                                                            @"SELECT SERVERPROPERTY('ComputerNamePhysicalNetBIOS') ComputerNamePhysicalNetBIOS",
                                                            @"SELECT 
                                                                CASE 
                                                                    WHEN SERVERPROPERTY('EngineEdition')=1 THEN 'Personal or Desktop Engine (Not available in SQL Server 2005 (9.x) and later versions.)' 
                                                                    WHEN SERVERPROPERTY('EngineEdition')=2 THEN 'Standard (This is returned for Standard, Web, and Business Intelligence.)' 
                                                                    WHEN SERVERPROPERTY('EngineEdition')=3 THEN 'Enterprise (This is returned for Evaluation, Developer, and both Enterprise editions.)'
                                                                    WHEN SERVERPROPERTY('EngineEdition')=4 THEN 'Express (This is returned for Express, Express with Tools and Express with Advanced Services)' 
                                                                    WHEN SERVERPROPERTY('EngineEdition')=5 THEN 'SQL Database' WHEN SERVERPROPERTY('EngineEdition')=6 THEN 'SQL Data Warehouse' 
                                                                    WHEN SERVERPROPERTY('EngineEdition')=8 THEN ' managed instance' END AS EngineEdition ",
                                                            @"SELECT @@LANGUAGE AS LANGUAGE",
                                                            @"SELECT (SELECT top 1 value_data FROM sys.dm_server_registry WHERE value_name='ObjectName')AS [Platform] ",
                                                            @"SELECT 
                                                                    CASE 
                                                                        WHEN SERVERPROPERTY('IsClustered') =1 THEN 'Clustered' 
                                                                        WHEN SERVERPROPERTY('IsClustered') =0 THEN 'Not Clustered' 
                                                                   END AS IsClustered"
                                                        };
    }
}